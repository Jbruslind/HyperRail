#!/usr/bin/env python3

# Mock endpoint for testing sensor_service requests and responses
# Currently just sleeps and sends success when its called, could build actual sensor interaction here

import rospy
import time

# Figure out the deal with SensorServiceRequest
# from hyper_rail.msg import GreenhouseSensorReadings
from hyper_rail.srv import SensorService, SensorServiceRequest, SensorServiceResponse

#Called when service receives new request
def receive_command(req: SensorServiceRequest):
    print(" * Sensor Mock\n * received action:", req.action)
    for i in range(3):
        print("sleeping", i)
        time.sleep(1)
    return("sensor success")


def init_node():
    """Create the ros node and basic functionality"""
    rospy.init_node("SensorMock")

    # Sleep once per second. This may not actually be necessary
    publish_rate = rospy.Rate(1)
    # publisher = rospy.Publisher("sensor_readings", GreenhouseSensorReadings, handler=publish_readings)

    # Service to receive camera commands
    service = rospy.Service("sensor_service", SensorService, handler=receive_command)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...") 

    while not rospy.is_shutdown():
        # publisher.publish(random.uniform(5, 10))
        publish_rate.sleep()

if __name__ == "__main__":
    init_node()