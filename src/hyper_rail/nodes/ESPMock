#!/usr/bin/env python3

"""
This is a quick mock to test the MachinePosition and GCodeFeed topics.
Swap this usage with ESPController
"""

import rospy
import re
import serial

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                        # Each service spins off a request
import time
import math
from geometry_msgs.msg import Vector3
from hyper_rail.srv import MotionService, MotionServiceRequest, MotionServiceResponse

from hyper_rail.msg import GCodeFeed                                                # Message formate for Gcode messages
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling

# Initialize 'state'
machinePos = [0, 0, 0]
workPos = [0, 0, 0]
runningState = "ok"


def parse_code(cur):
    code_dict = {}
    g = re.search("([Gg]0?[01])", cur)
    if g:
        print(g.groups())
        code_dict['G'] = g[1]

    x = re.search("(([Xx]) *(-?\d+.?\d*))", cur)
    if x:
        print(x)
        code_dict['X'] = float(x[3])

    y = re.search("(([Yy]) *(-?\d+.?\d*))", cur)
    if y:
        print(y)
        code_dict['Y'] = float(y[3])

    z = re.search("(([Zz]) *(-?\d+.?\d*))", cur)
    if z:
        print(z)
        code_dict['Z'] = float(z[3])
        
    f = re.search("(([Ff]) *(-?\d+.?\d*))", cur)
    if f:
        print(f)
        code_dict['F'] = float(f[3])

    print(code_dict)
    return(code_dict) 

def gcode_handler(data: GCodeFeed):
    print("GCodeFeed Received: ", data.code)
    dest = parse_code(data.code)
    print(dest['G'])
    if not (dest['G'] == "G00" or dest['G'] == "G01"):
        print(f"Received: {data.code}, ESP Mock is for demo, only accepts G00 and G01")
        return
    # dest.pop(0)
    # print(dest)
    # if len(dest) == 4:
    #     dest.pop(3)
    # print(dest)

    # dest = list(map(float, dest))
    # while machinePos['X'] != dest:

    xdiff = dest['X'] - machinePos[0]
    ydiff = dest['Y'] - machinePos[1]
    zdiff = dest['Z'] - machinePos[2]

    # Fake movements - set the machine position to the destination.
    # This will be replaced by actual movements with the ESPController
    machinePos[0] = dest['X']
    workPos[0] = machinePos[0]
    machinePos[1] = dest['Y']
    workPos[1] = machinePos[1]
    machinePos[2] = dest['Z']
    workPos[2] = machinePos[2]

    print("position updated to: {}                           ESP32 Mock\n".format(machinePos))
    time.sleep(0.2)

def send_Serial():
    try:
         ser = serial.Serial('/dev/grbl_controller', 15200, timeout=2)
         ser.write("G90\r\n".encode())

    except serial.SerialException as e:
        return 0
    except TypeError as e:
        return 0

def home():
    try:
        ser = serial.Serial('/dev/grbl_controller', 15200, timeout=2)
        # Wake up grbl
        ser.write("\r\n\r\n")
        time.sleep(2)   # Wait for grbl to initialize 
        ser.flushInput()  # Flush startup text in serial input
        ser.write("$H\r\n".encode())
        print('Sending: $H')
        ser.write('$H\n') # Send g-code block to grbl
        grbl_out = ser.readline() # Wait for grbl response with carriage return
        print(' : ' + grbl_out.strip())
        ser.close()
        
    except serial.SerialException as e:
        return 0
    except TypeError as e:
        return 0

def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("ESPMock")

    # Publish the current position of the machine to a topic
    publisher = rospy.Publisher("current_position", MachinePosition, queue_size=10)

    # Subscribe to the GCode feeder topic with a large queue as to not lose any g-code segments
    gcode_sub = rospy.Subscriber('gcode_feeder', GCodeFeed, callback=gcode_handler, queue_size=5000)

    # Rate at which to publish the position of the "spindle"
    pub_rate = rospy.Rate(1)
    # pub_rate = rospy.Rate(50)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: awaiting requests...")
    connected = 0
    
    while not rospy.is_shutdown():
        # Publish the current position
        publisher.publish(
            machinePosition=Vector3(machinePos[0],machinePos[1],machinePos[2]), 
            workPosition=Vector3(workPos[0], workPos[1], workPos[2]),
            runningState=runningState
            )

        # Repeat 1 times a second
        pub_rate.sleep()

if __name__ == "__main__":
    """Called when the node is started"""
    init_node()