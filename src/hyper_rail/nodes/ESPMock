#!/usr/bin/env python3

"""
This is a quick mock to test the MachinePosition and GCodeFeed topics.
Swap this usage with ESPController
"""

from platform import machine
import rospy
import re
import serial

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                        # Each service spins off a request
import time
import math
from geometry_msgs.msg import Vector3
from hyper_rail.srv import MotionService, MotionServiceRequest, MotionServiceResponse

from hyper_rail.msg import GCodeFeed                                                # Message formate for Gcode messages
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling

# Initialize 'state'
machinePos = [0, 0, 0]
workPos = [0, 0, 0]
runningState = "ok"
home_flag = 0
serialQueue = Queue()

def gcode_handler(data: GCodeFeed):
    #print("GCodeFeed Received: ", data.code)
    # dest.pop(0)
    # print(dest)
    # if len(dest) == 4:
    #     dest.pop(3)
    # print(dest)
    move(data.code)
    status()
    # dest = list(map(float, dest))
    # while machinePos['X'] != dest:

    #print("position updated to: {}                           ESP32 Mock\n".format(machinePos))
    time.sleep(0.2)

def queueSerial(toSend):
    while not rospy.is_shutdown():
        command = toSend.get() #grab the latest serial command to send
        #print('QUEUE RECIEVED: %s' % command)
        try:
            ser = serial.Serial('/dev/grbl_controller', 115200, timeout=2)
            ser.write(('%s\r\n' % command).encode())
            ser.flushInput()  # Flush startup text in serial input
            grbl_out = ser.readline().decode() # Wait for grbl response with carriage return
            #print('Reply: ' + grbl_out.strip())
            if command == '?': #Special handling needs to happen for a status 
                try:
                    grbl_out = grbl_out.split('|')
                    runningState = grbl_out[0]
                    pos = grbl_out[1].split(':')[1] #output is MPos:x.xxx,y.yyyy,z.zzzz -> (Mpos, x.xxx,y.yyy,z.zzz)
                    machinePos[0] = float(pos.split(',')[0]) 
                    machinePos[1] = float(pos.split(',')[1]) 
                    machinePos[2] = float(pos.split(',')[2])
                    grbl_out = ser.readline().decode() # Grab the "ok" after status command
                except IndexError as e:
                    print(e) 
                except Exception as e:
                    print(e)
            ser.close()
            toSend.task_done() #Indicate that this item is done
        except serial.SerialException as e:
            print("ERROR: %s" % e)
        except TypeError as e:
            print("ERROR: %s" % e)
        time.sleep(0.5) #give a small window for the Gcode processor before next command


def move(command):
    global home_flag, serialQueue
    if home_flag == 0:
        home()
    serialQueue.put('G90')
    move_cmd = "%s F2000\r\n" % command
    print("GCodeFeed Received: ", move_cmd)
    serialQueue.put(move_cmd)
    return 1 

def status():
    global serialQueue
    serialQueue.put('?')
    return 1
def home():
    global home_flag, serialQueue
    serialQueue.put('$H')
    home_flag = 1
    return 1

def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("ESPMock")

    # Publish the current position of the machine to a topic
    publisher = rospy.Publisher("current_position", MachinePosition, queue_size=10)

    # Subscribe to the GCode feeder topic with a large queue as to not lose any g-code segments
    gcode_sub = rospy.Subscriber('gcode_feeder', GCodeFeed, callback=gcode_handler, queue_size=5000)

    # Rate at which to publish the position of the "spindle"
    pub_rate = rospy.Rate(1)
    # pub_rate = rospy.Rate(50)
    with serialQueue.mutex:
        serialQueue.queue.clear()
    worker = Thread(target=queueSerial, args=(serialQueue,))
    worker.setDaemon(True)
    worker.start()
    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: awaiting requests...")
    connected = 0
    
    while not rospy.is_shutdown():
        # Publish the current position
        status()
        publisher.publish(
            machinePosition=Vector3(machinePos[0],machinePos[1],machinePos[2]), 
            workPosition=Vector3(workPos[0], workPos[1], workPos[2]),
            runningState=runningState
            )

        # Repeat 1 times a second
        pub_rate.sleep()

if __name__ == "__main__":
    """Called when the node is started"""
    init_node()
