#!/usr/bin/env python3

"""
This is a quick mock to test the MachinePosition and GCodeFeed topics.
Swap this usage with ESPController
"""

import rospy

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                        # Each service spins off a request
import time
import math
from geometry_msgs.msg import Vector3
from hyper_rail.srv import MotionService, MotionServiceRequest, MotionServiceResponse

from hyper_rail.msg import GCodeFeed                                                # Message formate for Gcode messages
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling

# Initialize 'state'
machinePos = [0, 0, 0]
workPos = [0, 0, 0]
runningState = "ok"

def gcode_handler(data: GCodeFeed):
    print("GCodeFeed Received: ", data.code)
    dest = data.code.split(" ")
    if dest[0] != "G00" or dest[0] != "G01":
        print(f"Received: {data.code}, ESP Mock is for demo, only accepts G00 and G01")
    dest.pop(0)
    dest = list(map(float, dest))
    while machinePos != dest:

        xdiff = dest[0] - machinePos[0]
        ydiff = dest[1] - machinePos[1]
        zdiff = dest[2] - machinePos[2]

        # Fake movements - set the machine position to the destination.
        # This will be replaced by actual movements with the ESPController
        machinePos[0] = dest[0]
        workPos[0] = machinePos[0]
        machinePos[1] = dest[1]
        workPos[1] = machinePos[1]
        machinePos[2] = dest[2]
        workPos[2] = machinePos[2]

        print("position updated to: {}                           ESP32 Mock\n".format(machinePos))
        time.sleep(0.2)


def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("ESPMock")

    # Publish the current position of the machine to a topic
    publisher = rospy.Publisher("current_position", MachinePosition, queue_size=10)

    # Subscribe to the GCode feeder topic with a large queue as to not lose any g-code segments
    gcode_sub = rospy.Subscriber('gcode_feeder', GCodeFeed, callback=gcode_handler, queue_size=5000)

    # Rate at which to publish the position of the "spindle"
    pub_rate = rospy.Rate(1)
    # pub_rate = rospy.Rate(50)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: awaiting requests...")


    while not rospy.is_shutdown():
        # Publish the current position
        publisher.publish(
            machinePosition=Vector3(machinePos[0],machinePos[1],machinePos[2]), 
            workPosition=Vector3(workPos[0], workPos[1], workPos[2]),
            runningState=runningState
            )

        # Repeat 30 times a second
        pub_rate.sleep()

if __name__ == "__main__":
    """Called when the node is started"""
    init_node()