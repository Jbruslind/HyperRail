#!/usr/bin/env python3

"""
The motion tracker is the event coordinator for the motion/data collection operation.
It is responsible for keeping track of the location of the end effector, notifying
the camera and sensor modules when to collect data, updating the database, and
telling the path planner when to send the next destination to the ESP32
"""

import rospy

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                        # Each service spins off a request
import time

from hyper_rail.srv import LocationService, LocationServiceRequest, LocationServiceResponse
from hyper_rail.srv import InterfaceService, InterfaceServiceRequest, InterfaceServiceResponse
from hyper_rail.srv import SensorService
from hyper_rail.srv import PathService

# Probably don't need these, see about using functions available thru ESP32Controller
from hyper_rail.msg import GCodeFeed                                                # Message formate for Gcode messages
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling
from hyper_rail.msg import InstructionFeed
# need ESP32Controller for polling

# SensorService Functions
def send_sensor_action():
    pass

def handle_sensor_response(req: SensorService):
    pass

# Not in the proper sense of request. This sends a request to PathPlanner indicating that it
# is ready for the next waypoint, but the next waypoint is send over the topic, not the response of this request
def request_next_waypoint():
    pass

# Receives the location and watches for the destination to be reached
# Put this in a class!
location = None
status = None
def update_position(Position: MachinePosition):
    location = Position.machinePosition
    # status = Position.status
    print("first?", location.x)

# Track motion and data collection
def watch_location(Action: InstructionFeed):
    pass

def manage_action(Waypoint):
    # Waypoint.code
    # Waypoint.action
    # Location code can be dot referenced
    location = "code"
    while True:
        if location == Waypoint.code:
            #spin threads and
            # move message sending to sensor functions above
            #send message on SensorService
            # TODO: Figure out what needs to be on the thread, if anything
            # instructionListener = Thread(target = watcher.watch)
            # instructionListener.daemon = True
            # instructionListener.start()
            print('preparing to send message')
            rospy.wait_for_service('camera_service')
            try:
                print("sending data to camera mock")
                message = rospy.ServiceProxy('camera_service', SensorService)
                response = message(action="image")
                # response = message(Waypoint.code, Waypoint.action)
                print(response.status)
                # Need to callback to sending the next request to PathPlanner
                rospy.wait_for_service('action_service')
                try:
                    print("requesting next instruction")
                    message = rospy.ServiceProxy('action_service', PathService)
                    response = message(status_id="success", waypoint_id="0, 1, 2")
                except rospy.ServiceException as e:
                    print("service call failed: %s"%e)
                return 
            except rospy.ServiceException as e:
                print("service call failed: %s"%e)

            #wait for join
            return
        # else if status == error:
            # handle error

# I think this is left over
def add_to_queue(req: InterfaceService):
    print(" received", req.command_data)
    if req.command_data == "show":
        print("queue currently contains:")
        for element in list(InstructionQueue.queue):
            print(element)
    else:
        InstructionQueue.put(req.command_data)
    return("received")

def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("LocationTracker")

    # Service to find out when to send next instruction
    # greenhouseService = rospy.Service("greenhouse_service", SensorService, handler=handle_sensor_response)
    # cameraService = rospy.Service("camera_service", SensorService, handler=handle_sensor_response)

    # Publisher object to notify the location tracking node of the next destination and action
    # publisher = rospy.Publisher("GCodeFeed", PathActions)

    # TODO: Figure out how concurrency works with topics. Will waypoint and location cause eachother to block at some point?
    # Subscribe to the GCode feeder topic with a large queue as to not lose any g-code segments
    location_sub = rospy.Subscriber('current_position', MachinePosition, callback=update_position, queue_size=10)
    # Subscribe to waypoint feed
    waypoint_sub = rospy.Subscriber("instructions", InstructionFeed, callback=manage_action, queue_size=10)

    # Pull data from sensor end effector at 111ms intervals
    # TODO: Don't need to be constantly publishing. Should this be a service/msg instead?
    # Check how publish_rate works. Can probably still publish in an event style and rate just comes into effect if multiple events happen to line up
    publish_rate = rospy.Rate(1)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...")



    while not rospy.is_shutdown():
        # if new_request:
        # db.query(PROGRAMS where UUID = :new_request.id)
        # db.getall
        # for each db.entry:
        #   
        # Publish the sensor readings to the topic
        # publisher.publish(greenHouseController.poll_data())
        
        # Maintain the correct interval for pulling data
        publish_rate.sleep()


if __name__ == "__main__":
    """Called when the node is started"""
    init_node()