#!/usr/bin/env python3

import rospy
import sys

from hyper_rail.msg import MachinePosition

from geometry_msgs.msg import Vector3

def location_client(stat, wid):
    rospy.wait_for_service('action_status')
    try:
        message = rospy.ServiceProxy('action_status', PathService)
        resp1 = message(stat, wid)
        return resp1.path_response
    except rospy.ServiceException as e:
        print("Service call failed: %s"%e)

def usage():
    return "%s [status message to send]"%sys.argv[0]

def init_node():
    # Start the node to run the service from
    rospy.init_node("Position_Tester")

    # Publish the current position of the machine to a topic
    publisher = rospy.Publisher("current_position", MachinePosition, queue_size=10)

    # Rate at which to publish the position of the "spindle"
    pub_rate = rospy.Rate(1)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: awaiting requests...")

    x = 1.0
    y = 1.0
    z = 1.0
    while not rospy.is_shutdown():
        
        x += 1
        y += 3

        # Publish the current position
        publisher.publish(
            machinePosition=Vector3(x, y, z), 
            workPosition=Vector3(0, 1, 2),
            runningState='Idle'
            )

        # Repeat 1 times a second
        pub_rate.sleep()

if __name__ == "__main__":
    init_node()