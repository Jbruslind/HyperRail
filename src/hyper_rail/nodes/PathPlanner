#!/usr/bin/env python3

import rospy

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                        # Each service spins off a request
import time

InstructionQueue = Queue()

from hyper_rail.srv import InterfaceService, InterfaceServiceRequest, InterfaceServiceResponse
from hyper_rail.srv import PathService
from hyper_rail.msg import GCodeFeed, InstructionFeed                                                # Message formate for Gcode messages
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling
# from hyper_rail.msg import PathActions
# from serial_comms.eGreenhouse_Driver import SerialDriver                            # Grbl communication
from communication.watcher import Watcher                                           # Class for keeping track of in progress waypoints

# Called when service receives new request
def add_to_queue(req: InterfaceService):
    print(" received", req.program_id)
    if req.program_id== "show":
        print("queue currently contains:")
        for element in list(InstructionQueue.queue):
            print(element)
    else:
        InstructionQueue.put(req.program_id)
    return("received")

def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("PathPlanner")

    # Publisher object to notify the location tracking node of the next destination and action
    publisher = rospy.Publisher("instructions", InstructionFeed, queue_size=10)
    watcher = Watcher(InstructionQueue, publisher)

    # Service to find out when to send next instruction
    action_watcher = rospy.Service("action_service", PathService, handler=watcher.setResponse)

    # Start the service for receiving commands from the UI
    service = rospy.Service("interface_service", InterfaceService, handler=add_to_queue)

    # Pull data from sensor end effector at 111ms intervals
    # TODO: Don't need to be constantly publishing. Should this be a service/msg instead?
    # Check how publish_rate works. Can probably still publish in an event style and rate just comes into effect if multiple events happen to line up
    publish_rate = rospy.Rate(1)

    # TODO: Channge USB port as it will likely be different on the actual device
    # Create a new driver object with the baudrate and location pulled from the constants file
    # motionController = SerialDriver(GRBL_DRIVER_SERIAL[0], GRBL_DRIVER_SERIAL[1])

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...")

    # Wait until ros is stopped
    # Listen for new request. Request has the uuid of the program to run
    # Get program from database:
    # 

    instructionListener = Thread(target = watcher.watch)
    instructionListener.daemon = True
    instructionListener.start()
    # q = Queue()
    # t1 = Thread(target = consumer, args = (q, ))
    # t2 = Thread(target = producer, args = (q, ))
    # t1.daemon = True
    # t1.start()
    # t2.daemon = True
    # t2.start()
    while not rospy.is_shutdown():
        # if new_request:
        # db.query(PROGRAMS where UUID = :new_request.id)
        # db.getall
        # for each db.entry:
        #   
        # Publish the sensor readings to the topic
        # publisher.publish(greenHouseController.poll_data())
        
        # Maintain the correct interval for pulling data
        publish_rate.sleep()


if __name__ == "__main__":
    """Called when the node is started"""
    init_node()


"""Intent is to receive a program from the UI
* program consists of a list of destinations and actions
* parse the list, send location to the ESP32Controller
* send location and action to the location tracking module. 
"""