#!/usr/bin/env python3

# This can be used for the basis of the camera node. Currently just hosts the
# camera service.

import rospy
import time

from hyper_rail.srv import SensorService, SensorServiceRequest, SensorServiceResponse

#Called when service receives new request
def receive_command(req: SensorServiceRequest):
    print("* Camera Mock\n * received action:", req.action)
    # req should be of class : SensorService Request and has types: 
    # uint32 program_run_id | uint32 run_waypoint_id | string action 
    print(req.run_waypoint_id)
    print(req.program_run_id)
    return("camera success")


def init_node():
    """Create the ros node and basic functionality"""
    rospy.init_node("CameraMock")

    # Sleep once per second. Just keeping the node alive
    publish_rate = rospy.Rate(1)

    # Service to receive camera commands
    service = rospy.Service("camera_service", SensorService, handler=receive_command)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...") 

    while not rospy.is_shutdown():
        publish_rate.sleep()

if __name__ == "__main__":
    init_node()