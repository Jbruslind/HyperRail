#!/usr/bin/env python3

# This can be used for the basis of the camera node. Currently just hosts the
# camera service.

import rospy
import time
import sys

from communication.camera_executor import Micasense, DFK33GP006
from hyper_rail.srv import SensorService, SensorServiceRequest, SensorServiceResponse

from communication.constants import DEFAULT_CAMERA_HOST, IMAGE_PATH

Cam = None

#Called when service receives new request
def receive_command(req: SensorServiceRequest): 
    Cam.program_id = req.program_run_id 
    Cam.waypoint_id = req.run_waypoint_id
    captured = Cam.capture_image()
    if captured:
        Cam.transfer_to_local_storage()
        print("Images captured successfully")
        return("camera success")
        
    else:
        print("Error: Image not capture")
        return("camera fail")


def init_node(arg):
    """Create the ros node and basic functionality"""
    rospy.init_node("CameraMock")
    print(arg)
    global cam_type 
    cam_type = arg[arg.index('-c') + 1]
    # Sleep once per second. Just keeping the node alive
    publish_rate = rospy.Rate(1)

    # Service to receive camera commands
    service = rospy.Service("camera_service", SensorService, handler=receive_command)

    # Inform the user that the node and service have been started successfully
    global Cam
    if 'DFK33GP006' in cam_type:
        Cam = DFK33GP006(IMAGE_PATH, 1, 1)
    elif 'RedEdge-M' in cam_type:
        Cam = Micasense(IMAGE_PATH, 1, 1, [1, 1, 1, 1, 1])
    else:
        print("No Compatible Camera")
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...") 

    while not rospy.is_shutdown():
        publish_rate.sleep()

if __name__ == "__main__":
    init_node(sys.argv[1:])