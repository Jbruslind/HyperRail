#!/usr/bin/env python3

"""
This node coordinates the actions of the hyper rail. Receives program ids from the UI
through the ProgramFeed, sends movement requests to the MotionNode, sends data collection
requests to the SensorNode and CameraNode.
"""

import rospy

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                         
import time

from hyper_rail.srv import InterfaceService, InterfaceServiceRequest, InterfaceServiceResponse
from hyper_rail.srv import PathService

from hyper_rail.msg import ProgramFeed                                              # Topic that UI publishes to
from hyper_rail.msg import GCodeFeed, InstructionFeed                               # Message format for Gcode messages FIXME: Verify that these arent being used anymore
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling
from hyper_rail.msg import MotionStatus                                            
from hyper_rail.msg import ProgramStatus
from communication.program_executor import Watcher                                  # Class for keeping track of in progress waypoints

InstructionQueue = Queue()

# Called when service receives new program_id through ProgramFeed
def add_to_queue(req: InterfaceService):
    print(" received", req.program_id)
    if req.program_id== "show":
        print("queue currently contains:")
        for element in list(InstructionQueue.queue):
            print(element)
    else:
        InstructionQueue.put(req.program_id)
    return("received")

def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("ProgramNode")

    # Publisher object to notify the location tracking node of the next destination and action
    publisher = rospy.Publisher("instructions", InstructionFeed, queue_size=100)
    status_pub = rospy.Publisher("program_status", ProgramStatus, queue_size = 100)
    watcher = Watcher(InstructionQueue, publisher, status_pub)

    # Start the service for receiving commands from the UI
    service = rospy.Service("interface_service", InterfaceService, handler=add_to_queue)

    # Subscribe to topic interface publishes to, store program IDs in queue
    # Arbitrarily chosing queue size of 50. Hitting more than 10 seems really unlikely anyways
    program_sub = rospy.Subscriber('programs', ProgramFeed, callback=add_to_queue, queue_size=50)

    status_sub = rospy.Subscriber("motion_status", MotionStatus, callback = watcher.update_motion_status, queue_size=50)

    # Pull data from sensor end effector at 111ms intervals
    publish_rate = rospy.Rate(9)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...")

    # Start watcher thread to start processing waypoints when a program is received
    watcherThread= Thread(target = watcher.watch)
    watcherThread.daemon = True
    watcherThread.start()

    while not rospy.is_shutdown():
        # TODO: Is there anything to use this loop for? is it necessary for the node
        # to keep running? Program processing is happening in a different thread.
        publish_rate.sleep()


if __name__ == "__main__":
    """Called when the node is started"""
    init_node()
