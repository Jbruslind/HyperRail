#!/usr/bin/env python3

"""
The motion tracker is the event coordinator for the motion/data collection operation.
It is responsible for keeping track of the location of the end effector, notifying
the camera and sensor modules when to collect data, updating the database, and
telling the path planner when to send the next destination to the ESP32
"""

import rospy

from queue import Queue                                                             # Queue is threadsafe, use for keeping keeping track of Programs
from threading import Thread                                                        # Each service spins off a request
from communication.motion_executor import MotionWatcher                             # Class for keeping track of in progress waypoints
import time

from hyper_rail.srv import MotionService, MotionServiceRequest, MotionServiceResponse
from hyper_rail.srv import ManualService

# Probably don't need these, see about using functions available thru ESP32Controller
from hyper_rail.msg import GCodeFeed                                                # Message formate for Gcode messages
from hyper_rail.msg import MachinePosition                                          # Message format for current position polling
from hyper_rail.msg import MotionStatus                                             # Message format for monitoring whether to wait on additional motions
from hyper_rail.msg import ProgramStatus
# need ESP32Controller for polling

# Track motion, send response when location = destination

def init_node():
    """Create the ros node an add basic topic functionality (Technical functions are stored in an src file)"""
    rospy.init_node("MotionNode")

    # Publisher object to notify the location tracking node of the next destination and action
    publisher = rospy.Publisher("gcode_feeder", GCodeFeed, queue_size=10)

    # Tracks current location and contains handler functions
    motionExecutor = MotionWatcher(publisher)

    # Service to find out when to send next instruction
    motionService = rospy.Service("motion_service", MotionService, handler=motionExecutor.receive_waypoint)

    # Service to receive manual input from UI
    manualService = rospy.Service("manual_service", ManualService, handler = motionExecutor.receive_manual_operation)

    status_sub = rospy.Subscriber("program_status", ProgramStatus, callback = motionExecutor.update_program_status, queue_size=100)

    motion_status_pub = rospy.Publisher("motion_status", MotionStatus, queue_size=10)

    # Subscribe to the GCode feeder topic with a large queue as to not lose any g-code segments
    location_sub = rospy.Subscriber('current_position', MachinePosition, callback=motionExecutor.update_position, queue_size=5000)

    # Pull data from sensor end effector at 100ms intervals
    publish_rate = rospy.Rate(10)

    # Inform the user that the node and service have been started successfully
    rospy.loginfo(f"{rospy.get_name()}: serial connection established...")

    # Start watcher thread to watch for single gcodes
    watcherThread= Thread(target = motionExecutor.watch_for_single_codes)
    watcherThread.daemon = True
    watcherThread.start()

    while not rospy.is_shutdown():
        # Publish whether or not the motion node is busy
        motion_status_pub.publish(motionExecutor.motion_status)
        publish_rate.sleep()


if __name__ == "__main__":
    """Called when the node is started"""
    init_node()